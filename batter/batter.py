"""
Provide the primary functions for preparing and processing FEP systems.
"""

import os
import sys
import shutil
import subprocess as sp
import tempfile
import MDAnalysis as mda
from MDAnalysis.topology.guessers import guess_types
from MDAnalysis.analysis import align
import pandas as pd
from importlib import resources


from typing import List, Tuple
import loguru
from loguru import logger

import warnings
warnings.filterwarnings("ignore", category=UserWarning)

# set info level for the logger
#logger.remove()
#logger.add(sys.stdout, level='INFO')

import numpy as np
from .utils.utils import (
        run_with_log,
        antechamber,
        tleap,
        cpptraj,
        parmchk2,
        charmmlipid2amber,
        obabel,
        vmd)

class System:
    """
    A class to represent and process a Free Energy Perturbation (FEP) system.

    It will be prepared in two stages: equil and fe. After the preparation
    of the equil system, run through the equilibration simulation and then
    prepare the fe system. The output of the equil system will be used as
    the input for the fe system.
    """

    def __init__(self,
                 stage: str,
                 system_name: str,
                 protein_input: str,
                 system_input: str,
                 system_dimensions: Tuple[float, float, float],
                 ligand_path: str,
                 ligand_poses: List[str] = [],
                 protein_anchor: str = 'CA',
                 output_dir: str = 'FEP',
                 retain_lig_h: bool = True,
                 ligand_ph: float = 7.4,
                 ligand_param: str = 'gaff2',
                 lipid_mol: List[str] = [],
                 lipid_ff: str = 'lipid21',
                 ):
        """
        Initialize the FEPSystem class.

        Parameters
        ----------
        stage : str
            The stage of the FEP system. It can be 'equil' or 'fe'.
        system_name : str
            The name of the system.
        protein_input : str
            Path to the protein file in PDB format.
            It should be exported from Maestro,
            which means the protonation states of the protein are assigned
            (I think tleap can recongnize e.g ASP and ASH, maybe?).
            Water and ligand can be present in the file,
            but they will be removed during preparation.
        system_input : str
            A prepared simulation system with `dabble`.
            The ligand does not need to be present.
        system_dimensions : Tuple[float, float, float]
            The dimensions of the system in Angstroms.
            It can be read from INPCRD file generated by `dabble`
            along with the system_input PDB file.
        ligand_path : str
            Path to the ligand file.
        ligand_poses : List[str], optional
            List of ligand poses to be included in the simulations.
            If it is empty, the pose from ligand_path will be used.
        output_dir : str
            Directory where output files will be saved.
        retain_lig_h : bool, optional
            Whether to retain hydrogens in the ligand. Default is True.
        ligand_ph : float, optional
            pH value for protonating the ligand. Default is 7.4.
        ligand_param : str, optional
            Parameter set for the ligand. Default is 'gaff'.
            Options are 'gaff' and 'gaff2'.
        lipid_mol : List[str], optional
            List of lipid molecules to be included in the simulations.
            Default is an empty list.
        lipid_ff : str, optional
            Force field for lipid atoms. Default is 'lipid21'.
        """
        self.stage = stage
        self.system_name = system_name
        self.protein_input = protein_input
        self.system_input = system_input
        self.system_dimensions = system_dimensions
        self.ligand_path = ligand_path
        self.ligand_poses = ligand_poses

        # check input existence
        if not os.path.exists(protein_input):
            raise FileNotFoundError(f"Protein input file not found: {protein_input}")
        if not os.path.exists(system_input):
            raise FileNotFoundError(f"System input file not found: {system_input}")
        if not os.path.exists(ligand_path):
            raise FileNotFoundError(f"Ligand file not found: {ligand_path}")

        # set to absolute path
        self.output_dir = os.path.abspath(output_dir) + '/'
        if not os.path.exists(self.output_dir):
            if self.stage == 'equil':
                os.makedirs(self.output_dir)
                os.makedirs(f"{self.output_dir}/all-poses", exist_ok=True)
                os.makedirs(f"{self.output_dir}/build_files", exist_ok=True)

            else:
                raise FileNotFoundError(
                    f"Output directory not found: {self.output_dir}"
                    "Please run the equilibration stage first")

        os.makedirs(f"{self.stage_path}", exist_ok=True)
        os.makedirs(f"{self.stage_path}/ff", exist_ok=True)
            
        self.retain_lig_h = retain_lig_h
        self.ligand_ph = ligand_ph
        self.ligand_param = ligand_param
        if self.ligand_param not in ['gaff', 'gaff2']:
            raise ValueError(f"Invalid ligand_param: {self.ligand_param}"
                                "Options are 'gaff' and 'gaff2'")
        if self.ligand_param == 'gaff':
            raise NotImplementedError("gaff is not supported yet for dabble (maybe?)")
        self.lipid_mol = lipid_mol
        if not self.lipid_mol:
            self.membrane_simulation = False
        else:
            self.membrane_simulation = True 
        self.lipid_ff = lipid_ff
        if self.lipid_ff != 'lipid21':
            raise ValueError(f"Invalid lipid_ff: {self.lipid_ff}"
                                "Only 'lipid21' is available")

        # Prepare the membrane parameters
        if self.membrane_simulation:
            self._prepare_membrane()

        if self.stage == 'equil':
            # Process the system
            #self._process_system()
            # Process ligand and prepare the parameters
            self._process_ligand()
            self._prepare_ligand_poses()
            # Prepare the system
            self._prepare_system()


    def _process_system(self):
        """
        Generate the protein, reference, and lipid (if applicable) files.
        """
        u_prot = mda.Universe(self.protein_input)
        u_sys = mda.Universe(self.system_input, format='XPDB')
        u_sys_aligned = mda.Universe(self.system_input, format = 'XPDB')
        rms_res = align.alignto(u_sys_aligned,
                u_prot,
                select='name CA and resid 60 to 250',
                match_atoms=False) 
        logger.debug(f'Protein RMSD before: {rms_res[0]}')
        logger.debug(f'Protein RMSD after: {rms_res[1]}')
        membrane_ag = u_sys_aligned.select_atoms(f'resname {" ".join(self.lipid_mol)}')
        logger.debug(f'Number of lipid molecules: {membrane_ag.n_residues}')
        water_ag = u_sys_aligned.select_atoms('byres (resname TIP3 and around 20 (protein or resname POPC))')
        logger.debug(f'Number of water molecules: {water_ag.n_residues}')
        u_merged = mda.Merge(u_prot.select_atoms('protein'), membrane_ag, water_ag)
        water = u_merged.select_atoms('resname TIP3')
        logger.debug(f'Number of water molecules in merged system: {water.n_residues}')
        logger.debug(f'Water atom names: {water.residues[0].atoms.names}')
        # set OW, OH2 to O
        # Otherwise tleap cannot recognize the water molecules
        water.select_atoms('name OW').names = 'O'
        water.select_atoms('name OH2').names = 'O'

        box_dim = np.zeros(6)
        if len(self.system_dimensions) == 3:
            box_dim[:3] = self.system_dimensions
            box_dim[3:] = 90.0
        elif len(self.system_dimensions) == 6:
            box_dim = self.system_dimensions
        else:
            raise ValueError(f"Invalid system_dimensions: {self.system_dimensions}")
        u_merged.dimensions = box_dim
        # save as *_docked.pdb that matched `input-dd-amber.in`
        u_merged.atoms.write(f"{self.output_dir}/all-poses/system_docked.pdb")
        protein_ref = u_sys.select_atoms('protein')
        protein_ref.write(f"{self.output_dir}/build_files/reference.pdb")


    def _process_ligand(self):
        """
        Process the ligand, including adding or removing hydrogens as needed.
        """

        # Ensure the ligand file is in PDB format
        logger.info(f'Processing ligand file: {self.ligand_path}')
        if not self.ligand_path.endswith('.pdb'):
            converted_path = f"{self.output_dir}/ligand.pdb"
            self.ligand.atoms.write(converted_path)
            self.ligand_path = converted_path
            self.ligand = mda.Universe(self.ligand_path)

        # retain hydrogens from the ligand
        if self.retain_lig_h:
            # convert mol2 to get charge
            shutil.copy(self.ligand_path, f"{self.output_dir}/ligand.pdb")
            run_with_log(f"{obabel} -i pdb {self.ligand_path} -o mol2 -O {self.output_dir}/ligand.mol2")

        else:
            # Remove hydrogens from the ligand
            noh_path = f"{self.output_dir}/ligand_noh.pdb"
            run_with_log(f"{obabel} -i pdb {self.ligand_path} -o pdb -O {noh_path} -d")

            # Add hydrogens based on the specified pH
            run_with_log(f"{obabel} -i pdb {noh_path} -o pdb -O {self.output_dir}/ligand.pdb -p {self.ligand_ph:.2f}")
            run_with_log(f"{obabel} -i pdb {noh_path} -o mol2 -O {self.output_dir}/ligand.mol2 -p {self.ligand_ph:.2f}")

        self.ligand_path = f"{self.output_dir}/ligand.pdb"
        self.ligand = mda.Universe(self.ligand_path)
        self.ligand_mol2_path = f"{self.output_dir}/ligand.mol2"
        self.ligand_mol2 = mda.Universe(self.ligand_mol2_path)

        self.ligand_charge = np.round(np.sum(self.ligand_mol2.atoms.charges))
        logger.info(f'The babel protonation of the ligand is for pH {self.ligand_ph:.2f}')
        logger.info(f'The net charge of the ligand is {self.ligand_charge}')

        self._prepare_ligand_parameters()


    def _prepare_ligand_parameters(self):
        """Prepare ligand parameters for the system"""
        # Get ligand parameters
        logger.info('Preparing ligand parameters')
        antechamber_command = f'{antechamber} -i {self.ligand_path} -fi pdb -o {self.output_dir}/ligand_ante.mol2 -fo mol2 -c bcc -s 2 -at {self.ligand_param} -nc {self.ligand_charge}'
        with tempfile.TemporaryDirectory() as tmpdir:
            run_with_log(antechamber_command, working_dir=tmpdir)
        shutil.copy(f"{self.output_dir}/ligand_ante.mol2", f"{self.stage_path}/ff/ligand.mol2")

        if self.ligand_param == 'gaff':
            run_with_log(f'{parmchk2} -i {self.output_dir}/ligand_ante.mol2 -f mol2 -o {self.output_dir}/ligand.frcmod -s 1')
        elif self.ligand_param == 'gaff2':
            run_with_log(f'{parmchk2} -i {self.output_dir}/ligand_ante.mol2 -f mol2 -o {self.output_dir}/ligand.frcmod -s 2')
        shutil.copy(f"{self.output_dir}/ligand.frcmod", f"{self.stage_path}/ff/ligand.frcmod")

        with tempfile.TemporaryDirectory() as tmpdir:
            run_with_log(f'{antechamber} -i {self.ligand_path} -fi pdb -o {self.output_dir}/ligand_ante.pdb -fo pdb', working_dir=tmpdir)

        # get lib file
        tleap_script = f"""
        source leaprc.protein.ff14SB
        source leaprc.{self.ligand_param}
        lig = loadmol2 {self.stage_path}/ff/ligand.mol2
        loadamberparams {self.stage_path}/ff/ligand.frcmod
        saveoff lig {self.stage_path}/ff/ligand.lib
        saveamberparm lig {self.stage_path}/ff/ligand.prmtop {self.stage_path}/ff/ligand.inpcrd

        quit
        """
        with open(f"{self.output_dir}/tleap.in", 'w') as f:
            f.write(tleap_script)
        run_with_log(f"{tleap} -f {self.output_dir}/tleap.in")

        logger.info('Ligand parameters prepared')


    def _prepare_ligand_poses(self):
        """
        Prepare ligand poses for the system.
        """
        if not self.ligand_poses:
            self.ligand_poses = [self.ligand_path]
        
        new_pose_paths = []
        for i, pose in enumerate(self.ligand_poses):
            if not pose.endswith('.pdb'):
                # try to convert the pose to pdb
                u = mda.Universe(pose)
                u.atoms.write(f"{self.output_dir}/all_poses/pose{i}.pdb")
                pose = f"{self.output_dir}/all_poses/pose{i}.pdb"
            if not self.retain_lig_h:
                noh_path = f"{self.output_dir}/all_poses/pose{i}_noh.pdb"
                run_with_log(f"{obabel} -i pdb {pose} -o pdb -O {noh_path} -d")

                # Add hydrogens based on the specified pH
                run_with_log(f"{obabel} -i pdb {noh_path} -o pdb -O {pose} -p {self.ligand_ph:.2f}")

            new_pose_paths.append(pose)
        
        self.ligand_poses = new_pose_paths


    def _prepare_membrane(self):
        """
        Prepare the membrane by converting CHARMM or 
        conventional lipid names into lipid21 names
        which e.g. for POPC, it will be PC, PA, OL.
        see: https://ambermd.org/AmberModels_lipids.php
        """
        logger.info('Preparing the membrane system')

        # read charmmlipid2amber file
        charmm_csv_path = resources.files("batter") / "data/charmmlipid2amber.csv"
        charmm_amber_lipid_df = pd.read_csv(charmm_csv_path, header=1, sep=',')
        
        lipid_mol = self.lipid_mol
        logger.info(f'Converting lipid input: {lipid_mol}')
        amber_lipid_mol = charmm_amber_lipid_df.query('residue in @lipid_mol')['replace']
        amber_lipid_mol = amber_lipid_mol.apply(lambda x: x.split()[1]).unique().tolist()
        
        # extend instead of replacing so that we can have both
        lipid_mol.extend(amber_lipid_mol)
        self.lipid_mol = lipid_mol
        logger.info(f'New lipid_mol list: {self.lipid_mol}')
    
    def _prepare_system(self):
        """
        Prepare the system for the FEP simulation.
        """
        logger.info('Preparing the system')

        logger.info('System prepared')

    @property
    def stage_path(self):
        """Return the path to the stage directory."""
        return f'{self.output_dir}/{self.stage}'