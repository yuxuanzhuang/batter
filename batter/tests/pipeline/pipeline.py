"""
This script is used to run the pipeline.

The pipeline is used to calculate the absolute binding free energy of a ligand to a protein
in a lipid bilayer.

Arguments:
    input (str): Path to the system JSON file (generated by prepare_template.ipynb).
    param (str): Path to the input file for the ABFE calculation.
    output_folder (str): Path to the output folder for the simulation.
    overwrite (bool): If set, existing output will be overwritten.
    only_equil (bool): If set, only the equilibration step will be run (default: False).
"""

import click
import os
import json
import sys
from datetime import datetime
from batter import MABFESystem, RBFESystem


@click.command()
@click.option('--input', required=True, type=click.Path(exists=True), help='Path to the system JSON file.')
@click.option('--param', required=True, type=click.Path(exists=True), help='Path to the ABFE input configuration file.')
@click.option('--ligand-ff', default='gaff2', type=click.Choice(['gaff2', 'openff-2.2.1'], case_sensitive=False))
@click.option('--output-folder', required=True, type=str, help='Output folder for the simulation.')
@click.option('--overwrite', is_flag=True, default=False, help='If set, overwrite existing output folders.')
@click.option('--dry-run', is_flag=True, default=False, help='If set, stop before submitting jobs.')
def run_pipeline(input, param, ligand_ff, output_folder, overwrite, dry_run):
    """Run the ABFE pipeline."""
    click.echo(f"Running ABFE pipeline...")
    click.echo(f"System JSON: {input}")
    click.echo(f"Input param file: {param}")
    click.echo(f"Ligand force field: {ligand_ff}")
    click.echo(f"Output folder: {output_folder}")
    click.echo(f"Overwrite: {overwrite}")
    click.echo(f"Dry run: {dry_run}")

    # Load the system JSON file
    with open(input, 'r') as f:
        system_data = json.load(f)
    protein_name = system_data['protein']
    protein_file = system_data['protein_input']
    system_file = system_data['system_input']
    equilibrated_rst = system_data['system_rst7_input']
    anchor_atoms = system_data['anchor_atoms']
    extra_restraints = system_data.get('extra_restraints', None)

    ligand_json = system_data['ligand_input']
    with open(ligand_json, 'r') as f:
        ligand_files = json.load(f)
    
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    else:
        if overwrite:
            # move to backup
            timestamp = datetime.now().strftime("%Y%m%d_%H%M")
            backup_folder = f"{output_folder}_{timestamp}"
            click.echo(f"Output folder {output_folder} already exists. Moving to backup: {backup_folder}")
            os.rename(output_folder, backup_folder)

            os.makedirs(output_folder)

    click.echo(f"Protein file: {protein_file}")
    click.echo(f"System file: {system_file}")
    click.echo(f"Equilibrated RST file: {equilibrated_rst}")
    click.echo(f"Ligand files: {ligand_files}")
    click.echo(f"Anchor atoms: {anchor_atoms}")
    click.echo(f"Extra restraints: {extra_restraints}")

    system = MABFESystem(folder=output_folder)

    system.create_system(
                system_name=protein_name,
                protein_input=protein_file,
                system_topology=system_file,
                system_coordinate=equilibrated_rst,
                ligand_paths=ligand_files,
                ligand_ff=ligand_ff,
                overwrite=overwrite,
                retain_lig_prot=True,
                lipid_mol=['POPC'],
                anchor_atoms=anchor_atoms,
    )

    system.run_pipeline(
        input_file=param,
        dry_run=dry_run,
        extra_restraints=extra_restraints,
        partition='owners',
    )

if __name__ == '__main__':
    run_pipeline()