#!/usr/bin/env python3
"""
fetkutils is a collection of misc utilities. The python scripts provide
a command-line interface to set options, and these options are passed
to functions defined in the fetkutils library.  The library exists to
for future development of automated free energy workflows.

Brief summary of functions
--------------------------
SimpleScheduleRead(read, directory, temp, fstart, fstop,
                   ssc, alpha0, alpha1, pso, re, 
                   clean, digits, verbose) -> info,pedata,interp
    Reads a lambda-schedule from file, or generates a schedule from
    the parameters, and analyzes the phase space overlap or replica
    exchange ratios from the efep_*_*.dat files located in the
    specified directory.

SimpleScheduleOpt(nlam, directory, temp, fstart, fstop,
                  ssc, sym, pso, re, clean,
                  maxgap, minval, digits, verbose) -> info,pedata,interp
    Optimizes a lambda-schedule to minimize the variance in the predicted
    phase space overlap or replica exchange ratios analyzed from the 
    efep_*_*.dat files in the specified directory.

AutoFindLambdaValues(directory) -> list of str
    Detects the lambda values from the existance of dvdl_*.dat files.

GetEFEPPath(dname,tlam,hlam) -> pathlib.Path
    The expected filename containing the potential energies of hlam
    evaluated at samples generated by simulation of tlam.

ReadDataFiles(dname,T,fstart,fstop) -> PotEneData
    Constructs a PotEneData object from a directory name, assuming that
    the data files obey the naming convention: dvdl_*.dat and efep_*_*.dat

OptSchedObjective( xfree, mapper, interp, minval, maxgap ) -> float
    The objective function used to optimize schedules.

OptSched( mapper, interp, minval, maxgap, xfree0=None, eps=5.e-5 ) -> res
    An interface to the scipy.optimize.minimize function. The return
    value is the output of minimize. This wrapper uses the L-BFGS-B
    optimization scheme, where the gradients are estimated from a
    3-point finite difference. This optimization strategy should only
    be used when the objective is a smooth function of the free parameters.

OptSchedNoGrad( mapper, interp, minval, maxgap, xfree0=None ) -> float
    An interface to the scipy.optimize.minimize function. The return
    value is the output of minimize. This wrapper uses the COBYLA
    optimization scheme. This optimization strategy should be used
    when the objective is not a smooth function of the free parameters.


Brief summary of classes
------------------------
SchedInfo
    Stores a lambda schedule and basic statistics

ParamMap
    A class that controls the mapping between the free parameters and the
    lambda schedule. This version uses N-2 parameters for an asymmetric 
    schedule with fixed lambda=0 and lambda=1 end-points.

SymParamMap
    A class that controls the mapping between the free parameters and the
    lambda schedule. This version uses (N-2)//2 parameters for a symetric 
    schedule with fixed lambda=0 and lambda=1 end-points and lambda=0.5
    mid-point.

GaussianParamMap
    A class that controls the mapping between two free parameters and the
    lambda schedule. The mapping is through an inverse integrated density
    function, where the density function is a normal distributions
    centered at lambda=0.5.

SccParamMap
    A class that controls the mapping between the free parameters and the
    lambda schedule. This version uses 1 parameter for a symmetric 
    SSC(alpha) schedule, where alpha is a parameter from 0 to 2.
    In this case, the smooth-step softcore functions are treated as
    integrated density functions to determine the mapping.

AsymSccParamMap
    A class that controls the mapping between the free parameters and the
    lambda schedule. This version uses 2 parameters for an asymmetric 
    SCC schedule. The two parameters are the alpha at lambda=0 and the alpha
    at lambda=1.

PotEneData
    A class that stores the observed PSO and RER data from a series of
    burn-in simulations

SlaterInterp
    A class that stores a radial basis function to interpolate exponents 
    used to recontruct the PSO or RER data at any point using an exponential 
    function.

GaussianInterp
    A class that stores a radial basis function to interpolate exponents 
    used to recontruct the PSO or RER data at any point using a Gaussian
    function.

"""

from . tischedule import SimpleScheduleRead
from . tischedule import SimpleScheduleOpt
from . tischedule import AutoFindLambdaValues
from . tischedule import GetEFEPPath
from . tischedule import ReadDataFiles
from . tischedule import OptSchedObjective
from . tischedule import OptSched
from . tischedule import OptSchedNoGrad
from . tischedule import SchedInfo
from . tischedule import ParamMap
from . tischedule import SymParamMap
from . tischedule import GaussianParamMap
from . tischedule import SccParamMap
from . tischedule import AsymSccParamMap
from . tischedule import PotEneData
from . tischedule import SlaterInterp
from . tischedule import GaussianInterp
from . tischedule import CptGeneralizedSSCSched
from . tischedule import CptSSCSched


__all__ = ["SimpleScheduleRead",
           "SimpleScheduleOpt",
           "AutoFindLambdaValues",
           "GetEFEPPath",
           "ReadDataFiles",
           "OptSchedObjective",
           "OptSched",
           "OptSchedNoGrad",
           "SchedInfo",
           "ParamMap",
           "SymParamMap",
           "GaussianParamMap",
           "SccParamMap",
           "AsymSccParamMap",
           "PotEneData",
           "SlaterInterp",
           "GaussianInterp",
           "CptGeneralizedSSCSched",
           "CptSSCSched" ]


